/**
 * Geins Management API
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.Envelope;
import org.openapitools.client.model.EnvelopeListProductModelsReadFeed;
import org.openapitools.client.model.EnvelopeListProductModelsReadProduct;
import org.openapitools.client.model.EnvelopeListProductModelsReadProductItem;
import org.openapitools.client.model.EnvelopeListProductModelsReadRelationType;
import org.openapitools.client.model.EnvelopeProductModelsReadProduct;
import org.openapitools.client.model.EnvelopeProductModelsReadProductItem;
import java.util.*;
import org.openapitools.client.model.ProductModelsMonitorSku;
import org.openapitools.client.model.ProductModelsProductCategory;
import org.openapitools.client.model.ProductModelsProductQuery;
import org.openapitools.client.model.ProductModelsReadProductItem;
import org.openapitools.client.model.ProductModelsReadProductItemStock;
import org.openapitools.client.model.ProductModelsRelatedProductEnvelope;
import org.openapitools.client.model.ProductModelsStockEnvelope;
import org.openapitools.client.model.ProductModelsWriteProduct;
import org.openapitools.client.model.ProductModelsWriteProductItem;
import org.openapitools.client.model.ProductModelsWriteProductItemStock;
import org.openapitools.client.model.ProductModelsWriteRelatedProduct;
import org.openapitools.client.model.ProductProductItemEnvelope;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ProductApi {
  String basePath = "https://mgmtapi.carismar.io";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Add a product availability monitor
  * 
   * @param model 
   * @return Envelope
  */
  public Envelope addAvailabilityMonitor (ProductModelsMonitorSku model) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = model;
    // verify the required parameter 'model' is set
    if (model == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'model' when calling addAvailabilityMonitor",
        new ApiException(400, "Missing the required parameter 'model' when calling addAvailabilityMonitor"));
    }

    // create path and map variables
    String path = "/API/Product/MonitorAvailability";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json",
      "text/json",
      "application/xml",
      "text/xml",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Envelope) ApiInvoker.deserialize(localVarResponse, "", Envelope.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Add a product availability monitor
   * 
   * @param model 
  */
  public void addAvailabilityMonitor (ProductModelsMonitorSku model, final Response.Listener<Envelope> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = model;

    // verify the required parameter 'model' is set
    if (model == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'model' when calling addAvailabilityMonitor",
        new ApiException(400, "Missing the required parameter 'model' when calling addAvailabilityMonitor"));
    }

    // create path and map variables
    String path = "/API/Product/MonitorAvailability".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json","text/json","application/xml","text/xml","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Envelope) ApiInvoker.deserialize(localVarResponse,  "", Envelope.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Adds a category relation to a product
  * 
   * @param productId The id of the product to update.
   * @param productCategory The category to relate the product to.
   * @param productIdType The type of product id supplied in {productId}.
   * @return Envelope
  */
  public Envelope addCategoryToProduct (String productId, ProductModelsProductCategory productCategory, Integer productIdType) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productCategory;
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling addCategoryToProduct",
        new ApiException(400, "Missing the required parameter 'productId' when calling addCategoryToProduct"));
    }
    // verify the required parameter 'productCategory' is set
    if (productCategory == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productCategory' when calling addCategoryToProduct",
        new ApiException(400, "Missing the required parameter 'productCategory' when calling addCategoryToProduct"));
    }

    // create path and map variables
    String path = "/API/Product/{productId}/Category".replaceAll("\\{" + "productId" + "\\}", apiInvoker.escapeString(productId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "productIdType", productIdType));
    String[] contentTypes = {
      "application/json",
      "text/json",
      "application/xml",
      "text/xml",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Envelope) ApiInvoker.deserialize(localVarResponse, "", Envelope.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Adds a category relation to a product
   * 
   * @param productId The id of the product to update.   * @param productCategory The category to relate the product to.   * @param productIdType The type of product id supplied in {productId}.
  */
  public void addCategoryToProduct (String productId, ProductModelsProductCategory productCategory, Integer productIdType, final Response.Listener<Envelope> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productCategory;

    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling addCategoryToProduct",
        new ApiException(400, "Missing the required parameter 'productId' when calling addCategoryToProduct"));
    }
    // verify the required parameter 'productCategory' is set
    if (productCategory == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productCategory' when calling addCategoryToProduct",
        new ApiException(400, "Missing the required parameter 'productCategory' when calling addCategoryToProduct"));
    }

    // create path and map variables
    String path = "/API/Product/{productId}/Category".replaceAll("\\{format\\}","json").replaceAll("\\{" + "productId" + "\\}", apiInvoker.escapeString(productId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "productIdType", productIdType));


    String[] contentTypes = {
      "application/json","text/json","application/xml","text/xml","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Envelope) ApiInvoker.deserialize(localVarResponse,  "", Envelope.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Adds an image relation to a product
  * 
   * @param productId The id of the product to update.
   * @param imageName The name of the image to set to product.
   * @param isPrimaryImage Specifies whether {imageName} should be set as the primary image of the product.
   * @param productIdType The type of product id supplied in {productId}.
   * @return Envelope
  */
  public Envelope addImageToProduct (String productId, String imageName, Boolean isPrimaryImage, Integer productIdType) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling addImageToProduct",
        new ApiException(400, "Missing the required parameter 'productId' when calling addImageToProduct"));
    }
    // verify the required parameter 'imageName' is set
    if (imageName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'imageName' when calling addImageToProduct",
        new ApiException(400, "Missing the required parameter 'imageName' when calling addImageToProduct"));
    }

    // create path and map variables
    String path = "/API/Product/{productId}/Image/{imageName}".replaceAll("\\{" + "productId" + "\\}", apiInvoker.escapeString(productId.toString())).replaceAll("\\{" + "imageName" + "\\}", apiInvoker.escapeString(imageName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "isPrimaryImage", isPrimaryImage));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "productIdType", productIdType));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Envelope) ApiInvoker.deserialize(localVarResponse, "", Envelope.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Adds an image relation to a product
   * 
   * @param productId The id of the product to update.   * @param imageName The name of the image to set to product.   * @param isPrimaryImage Specifies whether {imageName} should be set as the primary image of the product.   * @param productIdType The type of product id supplied in {productId}.
  */
  public void addImageToProduct (String productId, String imageName, Boolean isPrimaryImage, Integer productIdType, final Response.Listener<Envelope> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling addImageToProduct",
        new ApiException(400, "Missing the required parameter 'productId' when calling addImageToProduct"));
    }
    // verify the required parameter 'imageName' is set
    if (imageName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'imageName' when calling addImageToProduct",
        new ApiException(400, "Missing the required parameter 'imageName' when calling addImageToProduct"));
    }

    // create path and map variables
    String path = "/API/Product/{productId}/Image/{imageName}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "productId" + "\\}", apiInvoker.escapeString(productId.toString())).replaceAll("\\{" + "imageName" + "\\}", apiInvoker.escapeString(imageName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "isPrimaryImage", isPrimaryImage));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "productIdType", productIdType));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Envelope) ApiInvoker.deserialize(localVarResponse,  "", Envelope.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Add related products to a product
  * 
   * @param productId The id of the main product to which the relations will be created
   * @param relatedProducts The list of related products to link with the main product.
   * @param productIdType The type of product id for {productId} and supplied in {relatedProducts}.
   * @return ProductModelsRelatedProductEnvelope
  */
  public ProductModelsRelatedProductEnvelope addRelatedProductsToProduct (String productId, List<ProductModelsWriteRelatedProduct> relatedProducts, Integer productIdType) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = relatedProducts;
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling addRelatedProductsToProduct",
        new ApiException(400, "Missing the required parameter 'productId' when calling addRelatedProductsToProduct"));
    }
    // verify the required parameter 'relatedProducts' is set
    if (relatedProducts == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'relatedProducts' when calling addRelatedProductsToProduct",
        new ApiException(400, "Missing the required parameter 'relatedProducts' when calling addRelatedProductsToProduct"));
    }

    // create path and map variables
    String path = "/API/Product/{productId}/Related".replaceAll("\\{" + "productId" + "\\}", apiInvoker.escapeString(productId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "productIdType", productIdType));
    String[] contentTypes = {
      "application/json",
      "text/json",
      "application/xml",
      "text/xml",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProductModelsRelatedProductEnvelope) ApiInvoker.deserialize(localVarResponse, "", ProductModelsRelatedProductEnvelope.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Add related products to a product
   * 
   * @param productId The id of the main product to which the relations will be created   * @param relatedProducts The list of related products to link with the main product.   * @param productIdType The type of product id for {productId} and supplied in {relatedProducts}.
  */
  public void addRelatedProductsToProduct (String productId, List<ProductModelsWriteRelatedProduct> relatedProducts, Integer productIdType, final Response.Listener<ProductModelsRelatedProductEnvelope> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = relatedProducts;

    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling addRelatedProductsToProduct",
        new ApiException(400, "Missing the required parameter 'productId' when calling addRelatedProductsToProduct"));
    }
    // verify the required parameter 'relatedProducts' is set
    if (relatedProducts == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'relatedProducts' when calling addRelatedProductsToProduct",
        new ApiException(400, "Missing the required parameter 'relatedProducts' when calling addRelatedProductsToProduct"));
    }

    // create path and map variables
    String path = "/API/Product/{productId}/Related".replaceAll("\\{format\\}","json").replaceAll("\\{" + "productId" + "\\}", apiInvoker.escapeString(productId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "productIdType", productIdType));


    String[] contentTypes = {
      "application/json","text/json","application/xml","text/xml","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProductModelsRelatedProductEnvelope) ApiInvoker.deserialize(localVarResponse,  "", ProductModelsRelatedProductEnvelope.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Updates product items in batch
  * 
   * @param productItems The product items to update
   * @param productItemIdType The type of product item id
   * @return Envelope
  */
  public Envelope batchUpdateProductItems (List<ProductModelsWriteProductItem> productItems, Integer productItemIdType) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productItems;
    // verify the required parameter 'productItems' is set
    if (productItems == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productItems' when calling batchUpdateProductItems",
        new ApiException(400, "Missing the required parameter 'productItems' when calling batchUpdateProductItems"));
    }

    // create path and map variables
    String path = "/API/Product/Items";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "productItemIdType", productItemIdType));
    String[] contentTypes = {
      "application/json",
      "text/json",
      "application/xml",
      "text/xml",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Envelope) ApiInvoker.deserialize(localVarResponse, "", Envelope.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Updates product items in batch
   * 
   * @param productItems The product items to update   * @param productItemIdType The type of product item id
  */
  public void batchUpdateProductItems (List<ProductModelsWriteProductItem> productItems, Integer productItemIdType, final Response.Listener<Envelope> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productItems;

    // verify the required parameter 'productItems' is set
    if (productItems == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productItems' when calling batchUpdateProductItems",
        new ApiException(400, "Missing the required parameter 'productItems' when calling batchUpdateProductItems"));
    }

    // create path and map variables
    String path = "/API/Product/Items".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "productItemIdType", productItemIdType));


    String[] contentTypes = {
      "application/json","text/json","application/xml","text/xml","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Envelope) ApiInvoker.deserialize(localVarResponse,  "", Envelope.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update stock values for multiple product items
  * 
   * @param productItemStocks List of product item ids with new stock values.
   * @param productItemIdType The type of product item id supplied in {productItemStocks}.
   * @return ProductModelsStockEnvelope
  */
  public ProductModelsStockEnvelope batchUpdateStockValues (List<ProductModelsWriteProductItemStock> productItemStocks, Integer productItemIdType) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productItemStocks;
    // verify the required parameter 'productItemStocks' is set
    if (productItemStocks == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productItemStocks' when calling batchUpdateStockValues",
        new ApiException(400, "Missing the required parameter 'productItemStocks' when calling batchUpdateStockValues"));
    }

    // create path and map variables
    String path = "/API/Product/Stock";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "productItemIdType", productItemIdType));
    String[] contentTypes = {
      "application/json",
      "text/json",
      "application/xml",
      "text/xml",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProductModelsStockEnvelope) ApiInvoker.deserialize(localVarResponse, "", ProductModelsStockEnvelope.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update stock values for multiple product items
   * 
   * @param productItemStocks List of product item ids with new stock values.   * @param productItemIdType The type of product item id supplied in {productItemStocks}.
  */
  public void batchUpdateStockValues (List<ProductModelsWriteProductItemStock> productItemStocks, Integer productItemIdType, final Response.Listener<ProductModelsStockEnvelope> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productItemStocks;

    // verify the required parameter 'productItemStocks' is set
    if (productItemStocks == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productItemStocks' when calling batchUpdateStockValues",
        new ApiException(400, "Missing the required parameter 'productItemStocks' when calling batchUpdateStockValues"));
    }

    // create path and map variables
    String path = "/API/Product/Stock".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "productItemIdType", productItemIdType));


    String[] contentTypes = {
      "application/json","text/json","application/xml","text/xml","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProductModelsStockEnvelope) ApiInvoker.deserialize(localVarResponse,  "", ProductModelsStockEnvelope.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create a new product
  * 
   * @param product The product to create.
   * @param include Comma separated list of child-collections to also include with the created product. See  {Product.Models.ProductIncludes} names for valid options.
   * @return EnvelopeProductModelsReadProduct
  */
  public EnvelopeProductModelsReadProduct createProduct (ProductModelsWriteProduct product, String include) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = product;
    // verify the required parameter 'product' is set
    if (product == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'product' when calling createProduct",
        new ApiException(400, "Missing the required parameter 'product' when calling createProduct"));
    }

    // create path and map variables
    String path = "/API/Product";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "include", include));
    String[] contentTypes = {
      "application/json",
      "text/json",
      "application/xml",
      "text/xml",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EnvelopeProductModelsReadProduct) ApiInvoker.deserialize(localVarResponse, "", EnvelopeProductModelsReadProduct.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create a new product
   * 
   * @param product The product to create.   * @param include Comma separated list of child-collections to also include with the created product. See  {Product.Models.ProductIncludes} names for valid options.
  */
  public void createProduct (ProductModelsWriteProduct product, String include, final Response.Listener<EnvelopeProductModelsReadProduct> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = product;

    // verify the required parameter 'product' is set
    if (product == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'product' when calling createProduct",
        new ApiException(400, "Missing the required parameter 'product' when calling createProduct"));
    }

    // create path and map variables
    String path = "/API/Product".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "include", include));


    String[] contentTypes = {
      "application/json","text/json","application/xml","text/xml","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EnvelopeProductModelsReadProduct) ApiInvoker.deserialize(localVarResponse,  "", EnvelopeProductModelsReadProduct.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create a new product item
  * 
   * @param productId The id of the product to create an item on.
   * @param productItem The product item to create.
   * @param productIdType The type of product id supplied in {productId}.
   * @return EnvelopeProductModelsReadProductItem
  */
  public EnvelopeProductModelsReadProductItem createProductItems (String productId, ProductModelsWriteProductItem productItem, Integer productIdType) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productItem;
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling createProductItems",
        new ApiException(400, "Missing the required parameter 'productId' when calling createProductItems"));
    }
    // verify the required parameter 'productItem' is set
    if (productItem == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productItem' when calling createProductItems",
        new ApiException(400, "Missing the required parameter 'productItem' when calling createProductItems"));
    }

    // create path and map variables
    String path = "/API/Product/{productId}/Item".replaceAll("\\{" + "productId" + "\\}", apiInvoker.escapeString(productId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "productIdType", productIdType));
    String[] contentTypes = {
      "application/json",
      "text/json",
      "application/xml",
      "text/xml",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EnvelopeProductModelsReadProductItem) ApiInvoker.deserialize(localVarResponse, "", EnvelopeProductModelsReadProductItem.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create a new product item
   * 
   * @param productId The id of the product to create an item on.   * @param productItem The product item to create.   * @param productIdType The type of product id supplied in {productId}.
  */
  public void createProductItems (String productId, ProductModelsWriteProductItem productItem, Integer productIdType, final Response.Listener<EnvelopeProductModelsReadProductItem> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productItem;

    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling createProductItems",
        new ApiException(400, "Missing the required parameter 'productId' when calling createProductItems"));
    }
    // verify the required parameter 'productItem' is set
    if (productItem == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productItem' when calling createProductItems",
        new ApiException(400, "Missing the required parameter 'productItem' when calling createProductItems"));
    }

    // create path and map variables
    String path = "/API/Product/{productId}/Item".replaceAll("\\{format\\}","json").replaceAll("\\{" + "productId" + "\\}", apiInvoker.escapeString(productId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "productIdType", productIdType));


    String[] contentTypes = {
      "application/json","text/json","application/xml","text/xml","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EnvelopeProductModelsReadProductItem) ApiInvoker.deserialize(localVarResponse,  "", EnvelopeProductModelsReadProductItem.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get a specific product
  * 
   * @param productId The id of the product to get.
   * @param productIdType The type of product id supplied in {productId}.
   * @param include Comma separated list of child-collections to also include with the requested product. See  {Product.Models.ProductIncludes} names for valid options.
   * @return EnvelopeProductModelsReadProduct
  */
  public EnvelopeProductModelsReadProduct getProductById (String productId, Integer productIdType, String include) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling getProductById",
        new ApiException(400, "Missing the required parameter 'productId' when calling getProductById"));
    }

    // create path and map variables
    String path = "/API/Product/{productId}".replaceAll("\\{" + "productId" + "\\}", apiInvoker.escapeString(productId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "productIdType", productIdType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "include", include));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EnvelopeProductModelsReadProduct) ApiInvoker.deserialize(localVarResponse, "", EnvelopeProductModelsReadProduct.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get a specific product
   * 
   * @param productId The id of the product to get.   * @param productIdType The type of product id supplied in {productId}.   * @param include Comma separated list of child-collections to also include with the requested product. See  {Product.Models.ProductIncludes} names for valid options.
  */
  public void getProductById (String productId, Integer productIdType, String include, final Response.Listener<EnvelopeProductModelsReadProduct> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling getProductById",
        new ApiException(400, "Missing the required parameter 'productId' when calling getProductById"));
    }

    // create path and map variables
    String path = "/API/Product/{productId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "productId" + "\\}", apiInvoker.escapeString(productId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "productIdType", productIdType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "include", include));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EnvelopeProductModelsReadProduct) ApiInvoker.deserialize(localVarResponse,  "", EnvelopeProductModelsReadProduct.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get a specific product item
  * 
   * @param itemId The id of the product item to get.
   * @param productItemIdType The type of product item id supplied in {itemId}.
   * @return ProductProductItemEnvelope
  */
  public ProductProductItemEnvelope getProductItemById (String itemId, Integer productItemIdType) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'itemId' when calling getProductItemById",
        new ApiException(400, "Missing the required parameter 'itemId' when calling getProductItemById"));
    }

    // create path and map variables
    String path = "/API/Product/Item/{itemId}".replaceAll("\\{" + "itemId" + "\\}", apiInvoker.escapeString(itemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "productItemIdType", productItemIdType));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProductProductItemEnvelope) ApiInvoker.deserialize(localVarResponse, "", ProductProductItemEnvelope.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get a specific product item
   * 
   * @param itemId The id of the product item to get.   * @param productItemIdType The type of product item id supplied in {itemId}.
  */
  public void getProductItemById (String itemId, Integer productItemIdType, final Response.Listener<ProductProductItemEnvelope> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'itemId' when calling getProductItemById",
        new ApiException(400, "Missing the required parameter 'itemId' when calling getProductItemById"));
    }

    // create path and map variables
    String path = "/API/Product/Item/{itemId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "itemId" + "\\}", apiInvoker.escapeString(itemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "productItemIdType", productItemIdType));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProductProductItemEnvelope) ApiInvoker.deserialize(localVarResponse,  "", ProductProductItemEnvelope.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Add related products to a product using a fixed relation type
  * 
   * @param productId The id of the main product to which the relations will be created
   * @param relationTypeId The relation type id that will apply to all related products in {relatedProducts}
   * @param relatedProducts The list of related products to link with the main product.
   * @param productIdType The type of product id for {productId} and supplied in {relatedProducts}.
   * @return ProductModelsRelatedProductEnvelope
  */
  public ProductModelsRelatedProductEnvelope linkRelatedProductsByRelationId (String productId, Integer relationTypeId, List<ProductModelsWriteRelatedProduct> relatedProducts, Integer productIdType) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = relatedProducts;
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling linkRelatedProductsByRelationId",
        new ApiException(400, "Missing the required parameter 'productId' when calling linkRelatedProductsByRelationId"));
    }
    // verify the required parameter 'relationTypeId' is set
    if (relationTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'relationTypeId' when calling linkRelatedProductsByRelationId",
        new ApiException(400, "Missing the required parameter 'relationTypeId' when calling linkRelatedProductsByRelationId"));
    }
    // verify the required parameter 'relatedProducts' is set
    if (relatedProducts == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'relatedProducts' when calling linkRelatedProductsByRelationId",
        new ApiException(400, "Missing the required parameter 'relatedProducts' when calling linkRelatedProductsByRelationId"));
    }

    // create path and map variables
    String path = "/API/Product/{productId}/Related/{relationTypeId}".replaceAll("\\{" + "productId" + "\\}", apiInvoker.escapeString(productId.toString())).replaceAll("\\{" + "relationTypeId" + "\\}", apiInvoker.escapeString(relationTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "productIdType", productIdType));
    String[] contentTypes = {
      "application/json",
      "text/json",
      "application/xml",
      "text/xml",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProductModelsRelatedProductEnvelope) ApiInvoker.deserialize(localVarResponse, "", ProductModelsRelatedProductEnvelope.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Add related products to a product using a fixed relation type
   * 
   * @param productId The id of the main product to which the relations will be created   * @param relationTypeId The relation type id that will apply to all related products in {relatedProducts}   * @param relatedProducts The list of related products to link with the main product.   * @param productIdType The type of product id for {productId} and supplied in {relatedProducts}.
  */
  public void linkRelatedProductsByRelationId (String productId, Integer relationTypeId, List<ProductModelsWriteRelatedProduct> relatedProducts, Integer productIdType, final Response.Listener<ProductModelsRelatedProductEnvelope> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = relatedProducts;

    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling linkRelatedProductsByRelationId",
        new ApiException(400, "Missing the required parameter 'productId' when calling linkRelatedProductsByRelationId"));
    }
    // verify the required parameter 'relationTypeId' is set
    if (relationTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'relationTypeId' when calling linkRelatedProductsByRelationId",
        new ApiException(400, "Missing the required parameter 'relationTypeId' when calling linkRelatedProductsByRelationId"));
    }
    // verify the required parameter 'relatedProducts' is set
    if (relatedProducts == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'relatedProducts' when calling linkRelatedProductsByRelationId",
        new ApiException(400, "Missing the required parameter 'relatedProducts' when calling linkRelatedProductsByRelationId"));
    }

    // create path and map variables
    String path = "/API/Product/{productId}/Related/{relationTypeId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "productId" + "\\}", apiInvoker.escapeString(productId.toString())).replaceAll("\\{" + "relationTypeId" + "\\}", apiInvoker.escapeString(relationTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "productIdType", productIdType));


    String[] contentTypes = {
      "application/json","text/json","application/xml","text/xml","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProductModelsRelatedProductEnvelope) ApiInvoker.deserialize(localVarResponse,  "", ProductModelsRelatedProductEnvelope.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get all product items with pagination
  * 
   * @param page The page to fetch
   * @return EnvelopeListProductModelsReadProductItem
  */
  public EnvelopeListProductModelsReadProductItem listAllProductItemsPaged (Integer page) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'page' is set
    if (page == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'page' when calling listAllProductItemsPaged",
        new ApiException(400, "Missing the required parameter 'page' when calling listAllProductItemsPaged"));
    }

    // create path and map variables
    String path = "/API/Product/Items/{page}".replaceAll("\\{" + "page" + "\\}", apiInvoker.escapeString(page.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EnvelopeListProductModelsReadProductItem) ApiInvoker.deserialize(localVarResponse, "", EnvelopeListProductModelsReadProductItem.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get all product items with pagination
   * 
   * @param page The page to fetch
  */
  public void listAllProductItemsPaged (Integer page, final Response.Listener<EnvelopeListProductModelsReadProductItem> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'page' is set
    if (page == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'page' when calling listAllProductItemsPaged",
        new ApiException(400, "Missing the required parameter 'page' when calling listAllProductItemsPaged"));
    }

    // create path and map variables
    String path = "/API/Product/Items/{page}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "page" + "\\}", apiInvoker.escapeString(page.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EnvelopeListProductModelsReadProductItem) ApiInvoker.deserialize(localVarResponse,  "", EnvelopeListProductModelsReadProductItem.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets a list of all feeds
  * 
   * @return EnvelopeListProductModelsReadFeed
  */
  public EnvelopeListProductModelsReadFeed listFeeds () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/API/Product/Feeds";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EnvelopeListProductModelsReadFeed) ApiInvoker.deserialize(localVarResponse, "", EnvelopeListProductModelsReadFeed.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets a list of all feeds
   * 

  */
  public void listFeeds (final Response.Listener<EnvelopeListProductModelsReadFeed> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/API/Product/Feeds".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EnvelopeListProductModelsReadFeed) ApiInvoker.deserialize(localVarResponse,  "", EnvelopeListProductModelsReadFeed.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get all product items
  * 
   * @return List<ProductModelsReadProductItem>
  */
  public List<ProductModelsReadProductItem> listProductItems () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/API/Product/Items";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<ProductModelsReadProductItem>) ApiInvoker.deserialize(localVarResponse, "array", ProductModelsReadProductItem.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get all product items
   * 

  */
  public void listProductItems (final Response.Listener<List<ProductModelsReadProductItem>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/API/Product/Items".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<ProductModelsReadProductItem>) ApiInvoker.deserialize(localVarResponse,  "array", ProductModelsReadProductItem.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets a list of product relation types
  * 
   * @return EnvelopeListProductModelsReadRelationType
  */
  public EnvelopeListProductModelsReadRelationType listProductRelationTypes () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/API/Product/RelationTypes";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EnvelopeListProductModelsReadRelationType) ApiInvoker.deserialize(localVarResponse, "", EnvelopeListProductModelsReadRelationType.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets a list of product relation types
   * 

  */
  public void listProductRelationTypes (final Response.Listener<EnvelopeListProductModelsReadRelationType> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/API/Product/RelationTypes".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EnvelopeListProductModelsReadRelationType) ApiInvoker.deserialize(localVarResponse,  "", EnvelopeListProductModelsReadRelationType.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Query products
  * 
   * @param query The details of the query
   * @param include Comma separated list of child-collections to also include with the queried products. See  {Product.Models.ProductIncludes} names for valid options.
   * @return EnvelopeListProductModelsReadProduct
  */
  public EnvelopeListProductModelsReadProduct queryProducts (ProductModelsProductQuery query, String include) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = query;
    // verify the required parameter 'query' is set
    if (query == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'query' when calling queryProducts",
        new ApiException(400, "Missing the required parameter 'query' when calling queryProducts"));
    }

    // create path and map variables
    String path = "/API/Product/Query";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "include", include));
    String[] contentTypes = {
      "application/json",
      "text/json",
      "application/xml",
      "text/xml",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EnvelopeListProductModelsReadProduct) ApiInvoker.deserialize(localVarResponse, "", EnvelopeListProductModelsReadProduct.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Query products
   * 
   * @param query The details of the query   * @param include Comma separated list of child-collections to also include with the queried products. See  {Product.Models.ProductIncludes} names for valid options.
  */
  public void queryProducts (ProductModelsProductQuery query, String include, final Response.Listener<EnvelopeListProductModelsReadProduct> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = query;

    // verify the required parameter 'query' is set
    if (query == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'query' when calling queryProducts",
        new ApiException(400, "Missing the required parameter 'query' when calling queryProducts"));
    }

    // create path and map variables
    String path = "/API/Product/Query".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "include", include));


    String[] contentTypes = {
      "application/json","text/json","application/xml","text/xml","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EnvelopeListProductModelsReadProduct) ApiInvoker.deserialize(localVarResponse,  "", EnvelopeListProductModelsReadProduct.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Query products with pagination
  * The {Product.Models.ProductQuery.BatchId} property is mandatory when fetching a page other than the first page.  If no BatchId is provided for the first page, a new batch is created and the BatchId can be found in the {Envelope.PageResult} field.
   * @param page The page to fetch. To start a new batched query it is mandatory to send in page&#x3D;1
   * @param query The details of the query
   * @param include Comma separated list of child-collections to also include with the queried products. See  {Product.Models.ProductIncludes} names for valid options.
   * @return EnvelopeListProductModelsReadProduct
  */
  public EnvelopeListProductModelsReadProduct queryProductsPaged (Integer page, ProductModelsProductQuery query, String include) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = query;
    // verify the required parameter 'page' is set
    if (page == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'page' when calling queryProductsPaged",
        new ApiException(400, "Missing the required parameter 'page' when calling queryProductsPaged"));
    }
    // verify the required parameter 'query' is set
    if (query == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'query' when calling queryProductsPaged",
        new ApiException(400, "Missing the required parameter 'query' when calling queryProductsPaged"));
    }

    // create path and map variables
    String path = "/API/Product/Query/{page}".replaceAll("\\{" + "page" + "\\}", apiInvoker.escapeString(page.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "include", include));
    String[] contentTypes = {
      "application/json",
      "text/json",
      "application/xml",
      "text/xml",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EnvelopeListProductModelsReadProduct) ApiInvoker.deserialize(localVarResponse, "", EnvelopeListProductModelsReadProduct.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Query products with pagination
   * The {Product.Models.ProductQuery.BatchId} property is mandatory when fetching a page other than the first page.  If no BatchId is provided for the first page, a new batch is created and the BatchId can be found in the {Envelope.PageResult} field.
   * @param page The page to fetch. To start a new batched query it is mandatory to send in page&#x3D;1   * @param query The details of the query   * @param include Comma separated list of child-collections to also include with the queried products. See  {Product.Models.ProductIncludes} names for valid options.
  */
  public void queryProductsPaged (Integer page, ProductModelsProductQuery query, String include, final Response.Listener<EnvelopeListProductModelsReadProduct> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = query;

    // verify the required parameter 'page' is set
    if (page == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'page' when calling queryProductsPaged",
        new ApiException(400, "Missing the required parameter 'page' when calling queryProductsPaged"));
    }
    // verify the required parameter 'query' is set
    if (query == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'query' when calling queryProductsPaged",
        new ApiException(400, "Missing the required parameter 'query' when calling queryProductsPaged"));
    }

    // create path and map variables
    String path = "/API/Product/Query/{page}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "page" + "\\}", apiInvoker.escapeString(page.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "include", include));


    String[] contentTypes = {
      "application/json","text/json","application/xml","text/xml","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EnvelopeListProductModelsReadProduct) ApiInvoker.deserialize(localVarResponse,  "", EnvelopeListProductModelsReadProduct.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Query stock
  * 
   * @param productItemIds The details of the query.
   * @return List<ProductModelsReadProductItemStock>
  */
  public List<ProductModelsReadProductItemStock> queryStock (List<Integer> productItemIds) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productItemIds;
    // verify the required parameter 'productItemIds' is set
    if (productItemIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productItemIds' when calling queryStock",
        new ApiException(400, "Missing the required parameter 'productItemIds' when calling queryStock"));
    }

    // create path and map variables
    String path = "/API/Product/Stock/Query";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json",
      "text/json",
      "application/xml",
      "text/xml",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<ProductModelsReadProductItemStock>) ApiInvoker.deserialize(localVarResponse, "array", ProductModelsReadProductItemStock.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Query stock
   * 
   * @param productItemIds The details of the query.
  */
  public void queryStock (List<Integer> productItemIds, final Response.Listener<List<ProductModelsReadProductItemStock>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productItemIds;

    // verify the required parameter 'productItemIds' is set
    if (productItemIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productItemIds' when calling queryStock",
        new ApiException(400, "Missing the required parameter 'productItemIds' when calling queryStock"));
    }

    // create path and map variables
    String path = "/API/Product/Stock/Query".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json","text/json","application/xml","text/xml","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<ProductModelsReadProductItemStock>) ApiInvoker.deserialize(localVarResponse,  "array", ProductModelsReadProductItemStock.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Updates a product
  * 
   * @param productId The id of the product to update.
   * @param product The product data to update.
   * @param productIdType The type of product id supplied in {productId}.
   * @param include Comma separated list of child-collections to also include with the updated product. See  {Product.Models.ProductIncludes} names for valid options.
   * @return EnvelopeProductModelsReadProduct
  */
  public EnvelopeProductModelsReadProduct updateProduct (String productId, ProductModelsWriteProduct product, Integer productIdType, String include) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = product;
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling updateProduct",
        new ApiException(400, "Missing the required parameter 'productId' when calling updateProduct"));
    }
    // verify the required parameter 'product' is set
    if (product == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'product' when calling updateProduct",
        new ApiException(400, "Missing the required parameter 'product' when calling updateProduct"));
    }

    // create path and map variables
    String path = "/API/Product/{productId}".replaceAll("\\{" + "productId" + "\\}", apiInvoker.escapeString(productId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "productIdType", productIdType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "include", include));
    String[] contentTypes = {
      "application/json",
      "text/json",
      "application/xml",
      "text/xml",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EnvelopeProductModelsReadProduct) ApiInvoker.deserialize(localVarResponse, "", EnvelopeProductModelsReadProduct.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Updates a product
   * 
   * @param productId The id of the product to update.   * @param product The product data to update.   * @param productIdType The type of product id supplied in {productId}.   * @param include Comma separated list of child-collections to also include with the updated product. See  {Product.Models.ProductIncludes} names for valid options.
  */
  public void updateProduct (String productId, ProductModelsWriteProduct product, Integer productIdType, String include, final Response.Listener<EnvelopeProductModelsReadProduct> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = product;

    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling updateProduct",
        new ApiException(400, "Missing the required parameter 'productId' when calling updateProduct"));
    }
    // verify the required parameter 'product' is set
    if (product == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'product' when calling updateProduct",
        new ApiException(400, "Missing the required parameter 'product' when calling updateProduct"));
    }

    // create path and map variables
    String path = "/API/Product/{productId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "productId" + "\\}", apiInvoker.escapeString(productId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "productIdType", productIdType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "include", include));


    String[] contentTypes = {
      "application/json","text/json","application/xml","text/xml","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EnvelopeProductModelsReadProduct) ApiInvoker.deserialize(localVarResponse,  "", EnvelopeProductModelsReadProduct.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Updates a product item
  * 
   * @param itemId The id of the product item to update.
   * @param productItem The product item data to update.
   * @param productItemIdType The type of product item id supplied in {itemId}.
   * @return EnvelopeProductModelsReadProductItem
  */
  public EnvelopeProductModelsReadProductItem updateProductItem (String itemId, ProductModelsWriteProductItem productItem, Integer productItemIdType) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productItem;
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'itemId' when calling updateProductItem",
        new ApiException(400, "Missing the required parameter 'itemId' when calling updateProductItem"));
    }
    // verify the required parameter 'productItem' is set
    if (productItem == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productItem' when calling updateProductItem",
        new ApiException(400, "Missing the required parameter 'productItem' when calling updateProductItem"));
    }

    // create path and map variables
    String path = "/API/Product/Item/{itemId}".replaceAll("\\{" + "itemId" + "\\}", apiInvoker.escapeString(itemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "productItemIdType", productItemIdType));
    String[] contentTypes = {
      "application/json",
      "text/json",
      "application/xml",
      "text/xml",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EnvelopeProductModelsReadProductItem) ApiInvoker.deserialize(localVarResponse, "", EnvelopeProductModelsReadProductItem.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Updates a product item
   * 
   * @param itemId The id of the product item to update.   * @param productItem The product item data to update.   * @param productItemIdType The type of product item id supplied in {itemId}.
  */
  public void updateProductItem (String itemId, ProductModelsWriteProductItem productItem, Integer productItemIdType, final Response.Listener<EnvelopeProductModelsReadProductItem> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productItem;

    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'itemId' when calling updateProductItem",
        new ApiException(400, "Missing the required parameter 'itemId' when calling updateProductItem"));
    }
    // verify the required parameter 'productItem' is set
    if (productItem == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productItem' when calling updateProductItem",
        new ApiException(400, "Missing the required parameter 'productItem' when calling updateProductItem"));
    }

    // create path and map variables
    String path = "/API/Product/Item/{itemId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "itemId" + "\\}", apiInvoker.escapeString(itemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "productItemIdType", productItemIdType));


    String[] contentTypes = {
      "application/json","text/json","application/xml","text/xml","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EnvelopeProductModelsReadProductItem) ApiInvoker.deserialize(localVarResponse,  "", EnvelopeProductModelsReadProductItem.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
