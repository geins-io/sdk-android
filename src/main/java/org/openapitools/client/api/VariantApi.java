/**
 * Geins Management API
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.Envelope;
import org.openapitools.client.model.EnvelopeString;
import org.openapitools.client.model.EnvelopeVariantModelsReadVariant;
import org.openapitools.client.model.EnvelopeVariantModelsReadVariantGroup;
import java.util.*;
import org.openapitools.client.model.VariantModelsWriteVariant;
import org.openapitools.client.model.VariantModelsWriteVariantGroup;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class VariantApi {
  String basePath = "https://mgmtapi.geins.io";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Adds a product to an existing group
  * 
   * @param groupId The ID of the group to which a product should be added
   * @param productId The ID of the product to be added to the target group.
   * @param variant The variant details.
   * @param productIdType The type of product id provided.
   * @param include Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options.
   * @return EnvelopeVariantModelsReadVariantGroup
  */
  public EnvelopeVariantModelsReadVariantGroup addProductToVariantGroup (Integer groupId, String productId, List<VariantModelsWriteVariant> variant, Integer productIdType, String include) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = variant;
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling addProductToVariantGroup",
        new ApiException(400, "Missing the required parameter 'groupId' when calling addProductToVariantGroup"));
    }
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling addProductToVariantGroup",
        new ApiException(400, "Missing the required parameter 'productId' when calling addProductToVariantGroup"));
    }
    // verify the required parameter 'variant' is set
    if (variant == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'variant' when calling addProductToVariantGroup",
        new ApiException(400, "Missing the required parameter 'variant' when calling addProductToVariantGroup"));
    }

    // create path and map variables
    String path = "/API/VariantGroup/{groupId}/{productId}".replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString())).replaceAll("\\{" + "productId" + "\\}", apiInvoker.escapeString(productId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "productIdType", productIdType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "include", include));
    String[] contentTypes = {
      "application/json",
      "text/json",
      "application/xml",
      "text/xml",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EnvelopeVariantModelsReadVariantGroup) ApiInvoker.deserialize(localVarResponse, "", EnvelopeVariantModelsReadVariantGroup.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Adds a product to an existing group
   * 
   * @param groupId The ID of the group to which a product should be added   * @param productId The ID of the product to be added to the target group.   * @param variant The variant details.   * @param productIdType The type of product id provided.   * @param include Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options.
  */
  public void addProductToVariantGroup (Integer groupId, String productId, List<VariantModelsWriteVariant> variant, Integer productIdType, String include, final Response.Listener<EnvelopeVariantModelsReadVariantGroup> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = variant;

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling addProductToVariantGroup",
        new ApiException(400, "Missing the required parameter 'groupId' when calling addProductToVariantGroup"));
    }
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling addProductToVariantGroup",
        new ApiException(400, "Missing the required parameter 'productId' when calling addProductToVariantGroup"));
    }
    // verify the required parameter 'variant' is set
    if (variant == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'variant' when calling addProductToVariantGroup",
        new ApiException(400, "Missing the required parameter 'variant' when calling addProductToVariantGroup"));
    }

    // create path and map variables
    String path = "/API/VariantGroup/{groupId}/{productId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString())).replaceAll("\\{" + "productId" + "\\}", apiInvoker.escapeString(productId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "productIdType", productIdType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "include", include));


    String[] contentTypes = {
      "application/json","text/json","application/xml","text/xml","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EnvelopeVariantModelsReadVariantGroup) ApiInvoker.deserialize(localVarResponse,  "", EnvelopeVariantModelsReadVariantGroup.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Adds a product to an existing group
  * 
   * @param productId1 The ID of a product belonging to the target group.
   * @param productId2 The ID of the product to be added to the target group.
   * @param productIdType The type of product id provided.
   * @param include Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options.
   * @return EnvelopeVariantModelsReadVariantGroup
  */
  public EnvelopeVariantModelsReadVariantGroup addProductToVariantGroupByProductId (String productId1, String productId2, Integer productIdType, String include) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'productId1' is set
    if (productId1 == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId1' when calling addProductToVariantGroupByProductId",
        new ApiException(400, "Missing the required parameter 'productId1' when calling addProductToVariantGroupByProductId"));
    }
    // verify the required parameter 'productId2' is set
    if (productId2 == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId2' when calling addProductToVariantGroupByProductId",
        new ApiException(400, "Missing the required parameter 'productId2' when calling addProductToVariantGroupByProductId"));
    }

    // create path and map variables
    String path = "/API/Variant/{productId1}/{productId2}".replaceAll("\\{" + "productId1" + "\\}", apiInvoker.escapeString(productId1.toString())).replaceAll("\\{" + "productId2" + "\\}", apiInvoker.escapeString(productId2.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "productIdType", productIdType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "include", include));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EnvelopeVariantModelsReadVariantGroup) ApiInvoker.deserialize(localVarResponse, "", EnvelopeVariantModelsReadVariantGroup.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Adds a product to an existing group
   * 
   * @param productId1 The ID of a product belonging to the target group.   * @param productId2 The ID of the product to be added to the target group.   * @param productIdType The type of product id provided.   * @param include Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options.
  */
  public void addProductToVariantGroupByProductId (String productId1, String productId2, Integer productIdType, String include, final Response.Listener<EnvelopeVariantModelsReadVariantGroup> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'productId1' is set
    if (productId1 == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId1' when calling addProductToVariantGroupByProductId",
        new ApiException(400, "Missing the required parameter 'productId1' when calling addProductToVariantGroupByProductId"));
    }
    // verify the required parameter 'productId2' is set
    if (productId2 == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId2' when calling addProductToVariantGroupByProductId",
        new ApiException(400, "Missing the required parameter 'productId2' when calling addProductToVariantGroupByProductId"));
    }

    // create path and map variables
    String path = "/API/Variant/{productId1}/{productId2}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "productId1" + "\\}", apiInvoker.escapeString(productId1.toString())).replaceAll("\\{" + "productId2" + "\\}", apiInvoker.escapeString(productId2.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "productIdType", productIdType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "include", include));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EnvelopeVariantModelsReadVariantGroup) ApiInvoker.deserialize(localVarResponse,  "", EnvelopeVariantModelsReadVariantGroup.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create a new variant group
  * 
   * @param variantGroup The settings for the new group.
   * @param include Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options.
   * @return EnvelopeVariantModelsReadVariantGroup
  */
  public EnvelopeVariantModelsReadVariantGroup createVariantGroup (VariantModelsWriteVariantGroup variantGroup, String include) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = variantGroup;
    // verify the required parameter 'variantGroup' is set
    if (variantGroup == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'variantGroup' when calling createVariantGroup",
        new ApiException(400, "Missing the required parameter 'variantGroup' when calling createVariantGroup"));
    }

    // create path and map variables
    String path = "/API/VariantGroup";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "include", include));
    String[] contentTypes = {
      "application/json",
      "text/json",
      "application/xml",
      "text/xml",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EnvelopeVariantModelsReadVariantGroup) ApiInvoker.deserialize(localVarResponse, "", EnvelopeVariantModelsReadVariantGroup.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create a new variant group
   * 
   * @param variantGroup The settings for the new group.   * @param include Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options.
  */
  public void createVariantGroup (VariantModelsWriteVariantGroup variantGroup, String include, final Response.Listener<EnvelopeVariantModelsReadVariantGroup> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = variantGroup;

    // verify the required parameter 'variantGroup' is set
    if (variantGroup == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'variantGroup' when calling createVariantGroup",
        new ApiException(400, "Missing the required parameter 'variantGroup' when calling createVariantGroup"));
    }

    // create path and map variables
    String path = "/API/VariantGroup".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "include", include));


    String[] contentTypes = {
      "application/json","text/json","application/xml","text/xml","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EnvelopeVariantModelsReadVariantGroup) ApiInvoker.deserialize(localVarResponse,  "", EnvelopeVariantModelsReadVariantGroup.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create a new group for the provided product id
  * 
   * @param productId The id of the product, for which to create a group.
   * @param variantGroup The settings for the new group.
   * @param productIdType The type of product id provided.
   * @param include Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options.
   * @return EnvelopeVariantModelsReadVariantGroup
  */
  public EnvelopeVariantModelsReadVariantGroup createVariantGroupWithProduct (String productId, VariantModelsWriteVariantGroup variantGroup, Integer productIdType, String include) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = variantGroup;
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling createVariantGroupWithProduct",
        new ApiException(400, "Missing the required parameter 'productId' when calling createVariantGroupWithProduct"));
    }
    // verify the required parameter 'variantGroup' is set
    if (variantGroup == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'variantGroup' when calling createVariantGroupWithProduct",
        new ApiException(400, "Missing the required parameter 'variantGroup' when calling createVariantGroupWithProduct"));
    }

    // create path and map variables
    String path = "/API/Variant/{productId}/VariantGroup".replaceAll("\\{" + "productId" + "\\}", apiInvoker.escapeString(productId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "productIdType", productIdType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "include", include));
    String[] contentTypes = {
      "application/json",
      "text/json",
      "application/xml",
      "text/xml",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EnvelopeVariantModelsReadVariantGroup) ApiInvoker.deserialize(localVarResponse, "", EnvelopeVariantModelsReadVariantGroup.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create a new group for the provided product id
   * 
   * @param productId The id of the product, for which to create a group.   * @param variantGroup The settings for the new group.   * @param productIdType The type of product id provided.   * @param include Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options.
  */
  public void createVariantGroupWithProduct (String productId, VariantModelsWriteVariantGroup variantGroup, Integer productIdType, String include, final Response.Listener<EnvelopeVariantModelsReadVariantGroup> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = variantGroup;

    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling createVariantGroupWithProduct",
        new ApiException(400, "Missing the required parameter 'productId' when calling createVariantGroupWithProduct"));
    }
    // verify the required parameter 'variantGroup' is set
    if (variantGroup == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'variantGroup' when calling createVariantGroupWithProduct",
        new ApiException(400, "Missing the required parameter 'variantGroup' when calling createVariantGroupWithProduct"));
    }

    // create path and map variables
    String path = "/API/Variant/{productId}/VariantGroup".replaceAll("\\{format\\}","json").replaceAll("\\{" + "productId" + "\\}", apiInvoker.escapeString(productId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "productIdType", productIdType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "include", include));


    String[] contentTypes = {
      "application/json","text/json","application/xml","text/xml","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EnvelopeVariantModelsReadVariantGroup) ApiInvoker.deserialize(localVarResponse,  "", EnvelopeVariantModelsReadVariantGroup.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete an entire variant group
  * 
   * @param groupId The ID of the group to delete
   * @return EnvelopeVariantModelsReadVariantGroup
  */
  public EnvelopeVariantModelsReadVariantGroup deleteVariantGroup (Integer groupId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling deleteVariantGroup",
        new ApiException(400, "Missing the required parameter 'groupId' when calling deleteVariantGroup"));
    }

    // create path and map variables
    String path = "/API/VariantGroup/{groupId}".replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EnvelopeVariantModelsReadVariantGroup) ApiInvoker.deserialize(localVarResponse, "", EnvelopeVariantModelsReadVariantGroup.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete an entire variant group
   * 
   * @param groupId The ID of the group to delete
  */
  public void deleteVariantGroup (Integer groupId, final Response.Listener<EnvelopeVariantModelsReadVariantGroup> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling deleteVariantGroup",
        new ApiException(400, "Missing the required parameter 'groupId' when calling deleteVariantGroup"));
    }

    // create path and map variables
    String path = "/API/VariantGroup/{groupId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EnvelopeVariantModelsReadVariantGroup) ApiInvoker.deserialize(localVarResponse,  "", EnvelopeVariantModelsReadVariantGroup.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete an entire variant group
  * 
   * @param productId The id of a product that belongs to the group to remove.
   * @param productIdType The type of product id provided.
   * @return Envelope
  */
  public Envelope deleteVariantGroupByProductId (String productId, Integer productIdType) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling deleteVariantGroupByProductId",
        new ApiException(400, "Missing the required parameter 'productId' when calling deleteVariantGroupByProductId"));
    }

    // create path and map variables
    String path = "/API/Variant/{productId}/VariantGroup".replaceAll("\\{" + "productId" + "\\}", apiInvoker.escapeString(productId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "productIdType", productIdType));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Envelope) ApiInvoker.deserialize(localVarResponse, "", Envelope.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete an entire variant group
   * 
   * @param productId The id of a product that belongs to the group to remove.   * @param productIdType The type of product id provided.
  */
  public void deleteVariantGroupByProductId (String productId, Integer productIdType, final Response.Listener<Envelope> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling deleteVariantGroupByProductId",
        new ApiException(400, "Missing the required parameter 'productId' when calling deleteVariantGroupByProductId"));
    }

    // create path and map variables
    String path = "/API/Variant/{productId}/VariantGroup".replaceAll("\\{format\\}","json").replaceAll("\\{" + "productId" + "\\}", apiInvoker.escapeString(productId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "productIdType", productIdType));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Envelope) ApiInvoker.deserialize(localVarResponse,  "", Envelope.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get a specific variant group
  * 
   * @param groupId The ID of the group to get
   * @param include Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options.
   * @return EnvelopeVariantModelsReadVariantGroup
  */
  public EnvelopeVariantModelsReadVariantGroup getVariantGroup (Integer groupId, String include) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling getVariantGroup",
        new ApiException(400, "Missing the required parameter 'groupId' when calling getVariantGroup"));
    }

    // create path and map variables
    String path = "/API/VariantGroup/{groupId}".replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "include", include));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EnvelopeVariantModelsReadVariantGroup) ApiInvoker.deserialize(localVarResponse, "", EnvelopeVariantModelsReadVariantGroup.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get a specific variant group
   * 
   * @param groupId The ID of the group to get   * @param include Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options.
  */
  public void getVariantGroup (Integer groupId, String include, final Response.Listener<EnvelopeVariantModelsReadVariantGroup> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling getVariantGroup",
        new ApiException(400, "Missing the required parameter 'groupId' when calling getVariantGroup"));
    }

    // create path and map variables
    String path = "/API/VariantGroup/{groupId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "include", include));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EnvelopeVariantModelsReadVariantGroup) ApiInvoker.deserialize(localVarResponse,  "", EnvelopeVariantModelsReadVariantGroup.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get the variant group for the provided id
  * 
   * @param productId The id of the product, for which to get the group.
   * @param productIdType The type of id.
   * @param include Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options.
   * @return EnvelopeVariantModelsReadVariantGroup
  */
  public EnvelopeVariantModelsReadVariantGroup getVariantGroupByProductId (String productId, Integer productIdType, String include) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling getVariantGroupByProductId",
        new ApiException(400, "Missing the required parameter 'productId' when calling getVariantGroupByProductId"));
    }

    // create path and map variables
    String path = "/API/Variant/{productId}/VariantGroup".replaceAll("\\{" + "productId" + "\\}", apiInvoker.escapeString(productId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "productIdType", productIdType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "include", include));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EnvelopeVariantModelsReadVariantGroup) ApiInvoker.deserialize(localVarResponse, "", EnvelopeVariantModelsReadVariantGroup.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get the variant group for the provided id
   * 
   * @param productId The id of the product, for which to get the group.   * @param productIdType The type of id.   * @param include Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options.
  */
  public void getVariantGroupByProductId (String productId, Integer productIdType, String include, final Response.Listener<EnvelopeVariantModelsReadVariantGroup> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling getVariantGroupByProductId",
        new ApiException(400, "Missing the required parameter 'productId' when calling getVariantGroupByProductId"));
    }

    // create path and map variables
    String path = "/API/Variant/{productId}/VariantGroup".replaceAll("\\{format\\}","json").replaceAll("\\{" + "productId" + "\\}", apiInvoker.escapeString(productId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "productIdType", productIdType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "include", include));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EnvelopeVariantModelsReadVariantGroup) ApiInvoker.deserialize(localVarResponse,  "", EnvelopeVariantModelsReadVariantGroup.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get all valid variant labels
  * 
   * @return EnvelopeString
  */
  public EnvelopeString getVariantLabels () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/API/Variant/Labels";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EnvelopeString) ApiInvoker.deserialize(localVarResponse, "", EnvelopeString.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get all valid variant labels
   * 

  */
  public void getVariantLabels (final Response.Listener<EnvelopeString> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/API/Variant/Labels".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EnvelopeString) ApiInvoker.deserialize(localVarResponse,  "", EnvelopeString.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Remove a product from its variant group
  * 
   * @param productId The id of the product to remove from group.
   * @param productIdType The type of product id provided.
   * @param include Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options.
   * @return EnvelopeVariantModelsReadVariantGroup
  */
  public EnvelopeVariantModelsReadVariantGroup removeProductFromVariantGroup (String productId, Integer productIdType, String include) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling removeProductFromVariantGroup",
        new ApiException(400, "Missing the required parameter 'productId' when calling removeProductFromVariantGroup"));
    }

    // create path and map variables
    String path = "/API/Variant/{productId}".replaceAll("\\{" + "productId" + "\\}", apiInvoker.escapeString(productId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "productIdType", productIdType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "include", include));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EnvelopeVariantModelsReadVariantGroup) ApiInvoker.deserialize(localVarResponse, "", EnvelopeVariantModelsReadVariantGroup.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Remove a product from its variant group
   * 
   * @param productId The id of the product to remove from group.   * @param productIdType The type of product id provided.   * @param include Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options.
  */
  public void removeProductFromVariantGroup (String productId, Integer productIdType, String include, final Response.Listener<EnvelopeVariantModelsReadVariantGroup> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling removeProductFromVariantGroup",
        new ApiException(400, "Missing the required parameter 'productId' when calling removeProductFromVariantGroup"));
    }

    // create path and map variables
    String path = "/API/Variant/{productId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "productId" + "\\}", apiInvoker.escapeString(productId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "productIdType", productIdType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "include", include));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EnvelopeVariantModelsReadVariantGroup) ApiInvoker.deserialize(localVarResponse,  "", EnvelopeVariantModelsReadVariantGroup.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Adds the variant details for the product with the provided ID
  * 
   * @param productId The ID of the product for which to update the variant details.
   * @param variant The variant details.
   * @param productIdType The type of product id provided.
   * @return EnvelopeVariantModelsReadVariant
  */
  public EnvelopeVariantModelsReadVariant updateVariant (String productId, List<VariantModelsWriteVariant> variant, Integer productIdType) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = variant;
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling updateVariant",
        new ApiException(400, "Missing the required parameter 'productId' when calling updateVariant"));
    }
    // verify the required parameter 'variant' is set
    if (variant == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'variant' when calling updateVariant",
        new ApiException(400, "Missing the required parameter 'variant' when calling updateVariant"));
    }

    // create path and map variables
    String path = "/API/Variant/{productId}".replaceAll("\\{" + "productId" + "\\}", apiInvoker.escapeString(productId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "productIdType", productIdType));
    String[] contentTypes = {
      "application/json",
      "text/json",
      "application/xml",
      "text/xml",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EnvelopeVariantModelsReadVariant) ApiInvoker.deserialize(localVarResponse, "", EnvelopeVariantModelsReadVariant.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Adds the variant details for the product with the provided ID
   * 
   * @param productId The ID of the product for which to update the variant details.   * @param variant The variant details.   * @param productIdType The type of product id provided.
  */
  public void updateVariant (String productId, List<VariantModelsWriteVariant> variant, Integer productIdType, final Response.Listener<EnvelopeVariantModelsReadVariant> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = variant;

    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling updateVariant",
        new ApiException(400, "Missing the required parameter 'productId' when calling updateVariant"));
    }
    // verify the required parameter 'variant' is set
    if (variant == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'variant' when calling updateVariant",
        new ApiException(400, "Missing the required parameter 'variant' when calling updateVariant"));
    }

    // create path and map variables
    String path = "/API/Variant/{productId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "productId" + "\\}", apiInvoker.escapeString(productId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "productIdType", productIdType));


    String[] contentTypes = {
      "application/json","text/json","application/xml","text/xml","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EnvelopeVariantModelsReadVariant) ApiInvoker.deserialize(localVarResponse,  "", EnvelopeVariantModelsReadVariant.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Updates the settings of a group
  * 
   * @param groupId The ID of the group to update
   * @param variantGroup The new settings for the group
   * @param include Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options.
   * @return EnvelopeVariantModelsReadVariantGroup
  */
  public EnvelopeVariantModelsReadVariantGroup updateVariantGroup (Integer groupId, VariantModelsWriteVariantGroup variantGroup, String include) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = variantGroup;
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling updateVariantGroup",
        new ApiException(400, "Missing the required parameter 'groupId' when calling updateVariantGroup"));
    }
    // verify the required parameter 'variantGroup' is set
    if (variantGroup == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'variantGroup' when calling updateVariantGroup",
        new ApiException(400, "Missing the required parameter 'variantGroup' when calling updateVariantGroup"));
    }

    // create path and map variables
    String path = "/API/VariantGroup/{groupId}".replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "include", include));
    String[] contentTypes = {
      "application/json",
      "text/json",
      "application/xml",
      "text/xml",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EnvelopeVariantModelsReadVariantGroup) ApiInvoker.deserialize(localVarResponse, "", EnvelopeVariantModelsReadVariantGroup.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Updates the settings of a group
   * 
   * @param groupId The ID of the group to update   * @param variantGroup The new settings for the group   * @param include Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options.
  */
  public void updateVariantGroup (Integer groupId, VariantModelsWriteVariantGroup variantGroup, String include, final Response.Listener<EnvelopeVariantModelsReadVariantGroup> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = variantGroup;

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling updateVariantGroup",
        new ApiException(400, "Missing the required parameter 'groupId' when calling updateVariantGroup"));
    }
    // verify the required parameter 'variantGroup' is set
    if (variantGroup == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'variantGroup' when calling updateVariantGroup",
        new ApiException(400, "Missing the required parameter 'variantGroup' when calling updateVariantGroup"));
    }

    // create path and map variables
    String path = "/API/VariantGroup/{groupId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "include", include));


    String[] contentTypes = {
      "application/json","text/json","application/xml","text/xml","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EnvelopeVariantModelsReadVariantGroup) ApiInvoker.deserialize(localVarResponse,  "", EnvelopeVariantModelsReadVariantGroup.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
