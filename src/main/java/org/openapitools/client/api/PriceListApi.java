/**
 * Geins Management API
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import java.util.*;
import org.openapitools.client.model.PriceListModelsPriceList;
import org.openapitools.client.model.PriceListModelsPriceListPriceResponse;
import org.openapitools.client.model.PriceListModelsWritePriceListPrice;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class PriceListApi {
  String basePath = "https://mgmtapi.carismar.io";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Get all price list definitions
  * - Prices on campaign price lists (id: xxxxxx2) can not be updated. Any such entries will be ignored.  - ID for Ordinary, Sale and Campaign price lists starts from 1000000.   The ID is calculated by this formula, Market ID * 1000000 + Type of price list (Ordinary&#x3D;0, Sale&#x3D;1, Capaign&#x3D;2)  So :  Ordinary price list for market with ID 1 has ID &#x3D; 1000000  Sale price list for market with ID 1 has ID &#x3D; 1000001  Campaign price list for market with ID 1 has ID &#x3D; 1000002  Ordinary price list for market with ID 2 has ID &#x3D; 2000000  And so on ...
   * @return List<PriceListModelsPriceList>
  */
  public List<PriceListModelsPriceList> listPriceLists () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/API/PriceList/List";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<PriceListModelsPriceList>) ApiInvoker.deserialize(localVarResponse, "array", PriceListModelsPriceList.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get all price list definitions
   * - Prices on campaign price lists (id: xxxxxx2) can not be updated. Any such entries will be ignored.  - ID for Ordinary, Sale and Campaign price lists starts from 1000000.   The ID is calculated by this formula, Market ID * 1000000 + Type of price list (Ordinary&#x3D;0, Sale&#x3D;1, Capaign&#x3D;2)  So :  Ordinary price list for market with ID 1 has ID &#x3D; 1000000  Sale price list for market with ID 1 has ID &#x3D; 1000001  Campaign price list for market with ID 1 has ID &#x3D; 1000002  Ordinary price list for market with ID 2 has ID &#x3D; 2000000  And so on ...

  */
  public void listPriceLists (final Response.Listener<List<PriceListModelsPriceList>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/API/PriceList/List".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<PriceListModelsPriceList>) ApiInvoker.deserialize(localVarResponse,  "array", PriceListModelsPriceList.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Updates price list prices
  * - Prices on campaign price lists (id: xxxxxx2) can not be updated. Any such entries will be ignored.  - ID for Ordinary, Sale and Campaign price lists starts from 1000000.   The ID is calculated by this formula, Market ID * 1000000 + Type of price list (Ordinary&#x3D;0, Sale&#x3D;1, Capaign&#x3D;2)  So :  Ordinary price list for market with ID 1 has ID &#x3D; 1000000  Sale price list for market with ID 1 has ID &#x3D; 1000001  Campaign price list for market with ID 1 has ID &#x3D; 1000002  Ordinary price list for market with ID 2 has ID &#x3D; 2000000  And so on ...
   * @param priceListPrices List of new price list prices.
   * @param productIdType The type of product id supplied in {priceListPrices}
   * @param pricesIncVat Set to true if prices in {priceListPrices} includes VAT. Leave blank or set to false if they exclude VAT.
   * @return PriceListModelsPriceListPriceResponse
  */
  public PriceListModelsPriceListPriceResponse updatePricelistPrices (List<PriceListModelsWritePriceListPrice> priceListPrices, Integer productIdType, Boolean pricesIncVat) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = priceListPrices;
    // verify the required parameter 'priceListPrices' is set
    if (priceListPrices == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'priceListPrices' when calling updatePricelistPrices",
        new ApiException(400, "Missing the required parameter 'priceListPrices' when calling updatePricelistPrices"));
    }

    // create path and map variables
    String path = "/API/PriceList/Price";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "productIdType", productIdType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pricesIncVat", pricesIncVat));
    String[] contentTypes = {
      "application/json",
      "text/json",
      "application/xml",
      "text/xml",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PriceListModelsPriceListPriceResponse) ApiInvoker.deserialize(localVarResponse, "", PriceListModelsPriceListPriceResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Updates price list prices
   * - Prices on campaign price lists (id: xxxxxx2) can not be updated. Any such entries will be ignored.  - ID for Ordinary, Sale and Campaign price lists starts from 1000000.   The ID is calculated by this formula, Market ID * 1000000 + Type of price list (Ordinary&#x3D;0, Sale&#x3D;1, Capaign&#x3D;2)  So :  Ordinary price list for market with ID 1 has ID &#x3D; 1000000  Sale price list for market with ID 1 has ID &#x3D; 1000001  Campaign price list for market with ID 1 has ID &#x3D; 1000002  Ordinary price list for market with ID 2 has ID &#x3D; 2000000  And so on ...
   * @param priceListPrices List of new price list prices.   * @param productIdType The type of product id supplied in {priceListPrices}   * @param pricesIncVat Set to true if prices in {priceListPrices} includes VAT. Leave blank or set to false if they exclude VAT.
  */
  public void updatePricelistPrices (List<PriceListModelsWritePriceListPrice> priceListPrices, Integer productIdType, Boolean pricesIncVat, final Response.Listener<PriceListModelsPriceListPriceResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = priceListPrices;

    // verify the required parameter 'priceListPrices' is set
    if (priceListPrices == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'priceListPrices' when calling updatePricelistPrices",
        new ApiException(400, "Missing the required parameter 'priceListPrices' when calling updatePricelistPrices"));
    }

    // create path and map variables
    String path = "/API/PriceList/Price".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "productIdType", productIdType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pricesIncVat", pricesIncVat));


    String[] contentTypes = {
      "application/json","text/json","application/xml","text/xml","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PriceListModelsPriceListPriceResponse) ApiInvoker.deserialize(localVarResponse,  "", PriceListModelsPriceListPriceResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
