/**
 * Geins Management API
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.Envelope;
import org.openapitools.client.model.EnvelopeProductParameterModelsReadProductParameter;
import org.openapitools.client.model.EnvelopeProductParameterModelsReadProductParameterGroup;
import org.openapitools.client.model.EnvelopeProductParameterModelsReadProductParameterPredefinedValue;
import org.openapitools.client.model.EnvelopeProductParameterModelsReadProductParameterValue;
import org.openapitools.client.model.ProductParameterModelsWriteProductParameter;
import org.openapitools.client.model.ProductParameterModelsWriteProductParameterGroup;
import org.openapitools.client.model.ProductParameterModelsWriteProductParameterPredefinedValue;
import org.openapitools.client.model.ProductParameterModelsWriteProductParameterValue;
import org.openapitools.client.model.ProductParameterModelsWriteProductParameterValueBatch;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ProductParameterApi {
  String basePath = "https://mgmtapi.geins.io";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Replace multiple product parameter values
  * 
   * @param productParameterBatch The product parameter values to replace.
   * @return Envelope
  */
  public Envelope batchReplaceProductParameterValues (ProductParameterModelsWriteProductParameterValueBatch productParameterBatch) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productParameterBatch;
    // verify the required parameter 'productParameterBatch' is set
    if (productParameterBatch == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productParameterBatch' when calling batchReplaceProductParameterValues",
        new ApiException(400, "Missing the required parameter 'productParameterBatch' when calling batchReplaceProductParameterValues"));
    }

    // create path and map variables
    String path = "/API/ProductParameter/Values";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json",
      "text/json",
      "application/xml",
      "text/xml",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Envelope) ApiInvoker.deserialize(localVarResponse, "", Envelope.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Replace multiple product parameter values
   * 
   * @param productParameterBatch The product parameter values to replace.
  */
  public void batchReplaceProductParameterValues (ProductParameterModelsWriteProductParameterValueBatch productParameterBatch, final Response.Listener<Envelope> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productParameterBatch;

    // verify the required parameter 'productParameterBatch' is set
    if (productParameterBatch == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productParameterBatch' when calling batchReplaceProductParameterValues",
        new ApiException(400, "Missing the required parameter 'productParameterBatch' when calling batchReplaceProductParameterValues"));
    }

    // create path and map variables
    String path = "/API/ProductParameter/Values".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json","text/json","application/xml","text/xml","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Envelope) ApiInvoker.deserialize(localVarResponse,  "", Envelope.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update multiple product parameter values
  * 
   * @param productParameterBatch The product parameter values update.
   * @return Envelope
  */
  public Envelope batchUpdateProductParameterValues (ProductParameterModelsWriteProductParameterValueBatch productParameterBatch) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productParameterBatch;
    // verify the required parameter 'productParameterBatch' is set
    if (productParameterBatch == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productParameterBatch' when calling batchUpdateProductParameterValues",
        new ApiException(400, "Missing the required parameter 'productParameterBatch' when calling batchUpdateProductParameterValues"));
    }

    // create path and map variables
    String path = "/API/ProductParameter/Values";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json",
      "text/json",
      "application/xml",
      "text/xml",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Envelope) ApiInvoker.deserialize(localVarResponse, "", Envelope.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update multiple product parameter values
   * 
   * @param productParameterBatch The product parameter values update.
  */
  public void batchUpdateProductParameterValues (ProductParameterModelsWriteProductParameterValueBatch productParameterBatch, final Response.Listener<Envelope> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productParameterBatch;

    // verify the required parameter 'productParameterBatch' is set
    if (productParameterBatch == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productParameterBatch' when calling batchUpdateProductParameterValues",
        new ApiException(400, "Missing the required parameter 'productParameterBatch' when calling batchUpdateProductParameterValues"));
    }

    // create path and map variables
    String path = "/API/ProductParameter/Values".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json","text/json","application/xml","text/xml","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Envelope) ApiInvoker.deserialize(localVarResponse,  "", Envelope.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create or update a new product parameter value
  * 
   * @param productParameterValue The product parameter value to create or update.
   * @return EnvelopeProductParameterModelsReadProductParameterValue
  */
  public EnvelopeProductParameterModelsReadProductParameterValue createOrUpdateProductParameterValue (ProductParameterModelsWriteProductParameterValue productParameterValue) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productParameterValue;
    // verify the required parameter 'productParameterValue' is set
    if (productParameterValue == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productParameterValue' when calling createOrUpdateProductParameterValue",
        new ApiException(400, "Missing the required parameter 'productParameterValue' when calling createOrUpdateProductParameterValue"));
    }

    // create path and map variables
    String path = "/API/ProductParameter/Value";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json",
      "text/json",
      "application/xml",
      "text/xml",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EnvelopeProductParameterModelsReadProductParameterValue) ApiInvoker.deserialize(localVarResponse, "", EnvelopeProductParameterModelsReadProductParameterValue.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create or update a new product parameter value
   * 
   * @param productParameterValue The product parameter value to create or update.
  */
  public void createOrUpdateProductParameterValue (ProductParameterModelsWriteProductParameterValue productParameterValue, final Response.Listener<EnvelopeProductParameterModelsReadProductParameterValue> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productParameterValue;

    // verify the required parameter 'productParameterValue' is set
    if (productParameterValue == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productParameterValue' when calling createOrUpdateProductParameterValue",
        new ApiException(400, "Missing the required parameter 'productParameterValue' when calling createOrUpdateProductParameterValue"));
    }

    // create path and map variables
    String path = "/API/ProductParameter/Value".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json","text/json","application/xml","text/xml","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EnvelopeProductParameterModelsReadProductParameterValue) ApiInvoker.deserialize(localVarResponse,  "", EnvelopeProductParameterModelsReadProductParameterValue.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create a new product parameter
  * 
   * @param productParameter The product parameter to create.
   * @return EnvelopeProductParameterModelsReadProductParameter
  */
  public EnvelopeProductParameterModelsReadProductParameter createProductParameter (ProductParameterModelsWriteProductParameter productParameter) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productParameter;
    // verify the required parameter 'productParameter' is set
    if (productParameter == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productParameter' when calling createProductParameter",
        new ApiException(400, "Missing the required parameter 'productParameter' when calling createProductParameter"));
    }

    // create path and map variables
    String path = "/API/ProductParameter";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json",
      "text/json",
      "application/xml",
      "text/xml",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EnvelopeProductParameterModelsReadProductParameter) ApiInvoker.deserialize(localVarResponse, "", EnvelopeProductParameterModelsReadProductParameter.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create a new product parameter
   * 
   * @param productParameter The product parameter to create.
  */
  public void createProductParameter (ProductParameterModelsWriteProductParameter productParameter, final Response.Listener<EnvelopeProductParameterModelsReadProductParameter> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productParameter;

    // verify the required parameter 'productParameter' is set
    if (productParameter == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productParameter' when calling createProductParameter",
        new ApiException(400, "Missing the required parameter 'productParameter' when calling createProductParameter"));
    }

    // create path and map variables
    String path = "/API/ProductParameter".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json","text/json","application/xml","text/xml","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EnvelopeProductParameterModelsReadProductParameter) ApiInvoker.deserialize(localVarResponse,  "", EnvelopeProductParameterModelsReadProductParameter.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create a new product parameter group
  * 
   * @param productParameterGroup The product parameter group to create.
   * @return EnvelopeProductParameterModelsReadProductParameterGroup
  */
  public EnvelopeProductParameterModelsReadProductParameterGroup createProductParameterGroup (ProductParameterModelsWriteProductParameterGroup productParameterGroup) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productParameterGroup;
    // verify the required parameter 'productParameterGroup' is set
    if (productParameterGroup == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productParameterGroup' when calling createProductParameterGroup",
        new ApiException(400, "Missing the required parameter 'productParameterGroup' when calling createProductParameterGroup"));
    }

    // create path and map variables
    String path = "/API/ProductParameter/Group";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json",
      "text/json",
      "application/xml",
      "text/xml",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EnvelopeProductParameterModelsReadProductParameterGroup) ApiInvoker.deserialize(localVarResponse, "", EnvelopeProductParameterModelsReadProductParameterGroup.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create a new product parameter group
   * 
   * @param productParameterGroup The product parameter group to create.
  */
  public void createProductParameterGroup (ProductParameterModelsWriteProductParameterGroup productParameterGroup, final Response.Listener<EnvelopeProductParameterModelsReadProductParameterGroup> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productParameterGroup;

    // verify the required parameter 'productParameterGroup' is set
    if (productParameterGroup == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productParameterGroup' when calling createProductParameterGroup",
        new ApiException(400, "Missing the required parameter 'productParameterGroup' when calling createProductParameterGroup"));
    }

    // create path and map variables
    String path = "/API/ProductParameter/Group".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json","text/json","application/xml","text/xml","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EnvelopeProductParameterModelsReadProductParameterGroup) ApiInvoker.deserialize(localVarResponse,  "", EnvelopeProductParameterModelsReadProductParameterGroup.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create a new predefined value for a product parameter
  * 
   * @param productParameterPredefinedValue The predefined value to create.
   * @return EnvelopeProductParameterModelsReadProductParameterPredefinedValue
  */
  public EnvelopeProductParameterModelsReadProductParameterPredefinedValue createProductParameterPredefinedValue (ProductParameterModelsWriteProductParameterPredefinedValue productParameterPredefinedValue) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productParameterPredefinedValue;
    // verify the required parameter 'productParameterPredefinedValue' is set
    if (productParameterPredefinedValue == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productParameterPredefinedValue' when calling createProductParameterPredefinedValue",
        new ApiException(400, "Missing the required parameter 'productParameterPredefinedValue' when calling createProductParameterPredefinedValue"));
    }

    // create path and map variables
    String path = "/API/ProductParameter/PredefinedValue";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json",
      "text/json",
      "application/xml",
      "text/xml",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EnvelopeProductParameterModelsReadProductParameterPredefinedValue) ApiInvoker.deserialize(localVarResponse, "", EnvelopeProductParameterModelsReadProductParameterPredefinedValue.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create a new predefined value for a product parameter
   * 
   * @param productParameterPredefinedValue The predefined value to create.
  */
  public void createProductParameterPredefinedValue (ProductParameterModelsWriteProductParameterPredefinedValue productParameterPredefinedValue, final Response.Listener<EnvelopeProductParameterModelsReadProductParameterPredefinedValue> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productParameterPredefinedValue;

    // verify the required parameter 'productParameterPredefinedValue' is set
    if (productParameterPredefinedValue == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productParameterPredefinedValue' when calling createProductParameterPredefinedValue",
        new ApiException(400, "Missing the required parameter 'productParameterPredefinedValue' when calling createProductParameterPredefinedValue"));
    }

    // create path and map variables
    String path = "/API/ProductParameter/PredefinedValue".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json","text/json","application/xml","text/xml","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EnvelopeProductParameterModelsReadProductParameterPredefinedValue) ApiInvoker.deserialize(localVarResponse,  "", EnvelopeProductParameterModelsReadProductParameterPredefinedValue.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get a specific product parameter
  * 
   * @param id The id of the product parameter to get.
   * @return EnvelopeProductParameterModelsReadProductParameter
  */
  public EnvelopeProductParameterModelsReadProductParameter getProductParameterById (Integer id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling getProductParameterById",
        new ApiException(400, "Missing the required parameter 'id' when calling getProductParameterById"));
    }

    // create path and map variables
    String path = "/API/ProductParameter/{id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EnvelopeProductParameterModelsReadProductParameter) ApiInvoker.deserialize(localVarResponse, "", EnvelopeProductParameterModelsReadProductParameter.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get a specific product parameter
   * 
   * @param id The id of the product parameter to get.
  */
  public void getProductParameterById (Integer id, final Response.Listener<EnvelopeProductParameterModelsReadProductParameter> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling getProductParameterById",
        new ApiException(400, "Missing the required parameter 'id' when calling getProductParameterById"));
    }

    // create path and map variables
    String path = "/API/ProductParameter/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EnvelopeProductParameterModelsReadProductParameter) ApiInvoker.deserialize(localVarResponse,  "", EnvelopeProductParameterModelsReadProductParameter.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get a specific product parameter group
  * 
   * @param id The id of the product parameter group to get.
   * @return EnvelopeProductParameterModelsReadProductParameterGroup
  */
  public EnvelopeProductParameterModelsReadProductParameterGroup getProductParameterGroupById (Integer id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling getProductParameterGroupById",
        new ApiException(400, "Missing the required parameter 'id' when calling getProductParameterGroupById"));
    }

    // create path and map variables
    String path = "/API/ProductParameter/Group/{id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EnvelopeProductParameterModelsReadProductParameterGroup) ApiInvoker.deserialize(localVarResponse, "", EnvelopeProductParameterModelsReadProductParameterGroup.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get a specific product parameter group
   * 
   * @param id The id of the product parameter group to get.
  */
  public void getProductParameterGroupById (Integer id, final Response.Listener<EnvelopeProductParameterModelsReadProductParameterGroup> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling getProductParameterGroupById",
        new ApiException(400, "Missing the required parameter 'id' when calling getProductParameterGroupById"));
    }

    // create path and map variables
    String path = "/API/ProductParameter/Group/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EnvelopeProductParameterModelsReadProductParameterGroup) ApiInvoker.deserialize(localVarResponse,  "", EnvelopeProductParameterModelsReadProductParameterGroup.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get a specific predefined value for a product parameter
  * 
   * @param id The id of the predefined value to get.
   * @return EnvelopeProductParameterModelsReadProductParameterValue
  */
  public EnvelopeProductParameterModelsReadProductParameterValue getProductParameterPredefinedValue (Integer id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling getProductParameterPredefinedValue",
        new ApiException(400, "Missing the required parameter 'id' when calling getProductParameterPredefinedValue"));
    }

    // create path and map variables
    String path = "/API/ProductParameter/PredefinedValue/{id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EnvelopeProductParameterModelsReadProductParameterValue) ApiInvoker.deserialize(localVarResponse, "", EnvelopeProductParameterModelsReadProductParameterValue.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get a specific predefined value for a product parameter
   * 
   * @param id The id of the predefined value to get.
  */
  public void getProductParameterPredefinedValue (Integer id, final Response.Listener<EnvelopeProductParameterModelsReadProductParameterValue> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling getProductParameterPredefinedValue",
        new ApiException(400, "Missing the required parameter 'id' when calling getProductParameterPredefinedValue"));
    }

    // create path and map variables
    String path = "/API/ProductParameter/PredefinedValue/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EnvelopeProductParameterModelsReadProductParameterValue) ApiInvoker.deserialize(localVarResponse,  "", EnvelopeProductParameterModelsReadProductParameterValue.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get a specific product parameter value
  * 
   * @param id The id of the product parameter value to get.
   * @param predefinedValueId The predefined value id of the product parameter value to get. Only applicable for {ProductParameter.Models.ProductParameterType.Multi}.
   * @return EnvelopeProductParameterModelsReadProductParameterValue
  */
  public EnvelopeProductParameterModelsReadProductParameterValue getProductParameterValue (Integer id, String predefinedValueId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling getProductParameterValue",
        new ApiException(400, "Missing the required parameter 'id' when calling getProductParameterValue"));
    }

    // create path and map variables
    String path = "/API/ProductParameter/Value/{id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "predefinedValueId", predefinedValueId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EnvelopeProductParameterModelsReadProductParameterValue) ApiInvoker.deserialize(localVarResponse, "", EnvelopeProductParameterModelsReadProductParameterValue.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get a specific product parameter value
   * 
   * @param id The id of the product parameter value to get.   * @param predefinedValueId The predefined value id of the product parameter value to get. Only applicable for {ProductParameter.Models.ProductParameterType.Multi}.
  */
  public void getProductParameterValue (Integer id, String predefinedValueId, final Response.Listener<EnvelopeProductParameterModelsReadProductParameterValue> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling getProductParameterValue",
        new ApiException(400, "Missing the required parameter 'id' when calling getProductParameterValue"));
    }

    // create path and map variables
    String path = "/API/ProductParameter/Value/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "predefinedValueId", predefinedValueId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EnvelopeProductParameterModelsReadProductParameterValue) ApiInvoker.deserialize(localVarResponse,  "", EnvelopeProductParameterModelsReadProductParameterValue.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Updates a product parameter
  * Leaving out a property will ensure no changes are made to that property. Collection properties will delete and/or add as necessary to match the supplied data.
   * @param id The id of the product parameter to update.
   * @param productParameter The product parameter data to update.
   * @return EnvelopeProductParameterModelsReadProductParameter
  */
  public EnvelopeProductParameterModelsReadProductParameter updateProductParameter (Integer id, ProductParameterModelsWriteProductParameter productParameter) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productParameter;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling updateProductParameter",
        new ApiException(400, "Missing the required parameter 'id' when calling updateProductParameter"));
    }
    // verify the required parameter 'productParameter' is set
    if (productParameter == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productParameter' when calling updateProductParameter",
        new ApiException(400, "Missing the required parameter 'productParameter' when calling updateProductParameter"));
    }

    // create path and map variables
    String path = "/API/ProductParameter/{id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json",
      "text/json",
      "application/xml",
      "text/xml",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EnvelopeProductParameterModelsReadProductParameter) ApiInvoker.deserialize(localVarResponse, "", EnvelopeProductParameterModelsReadProductParameter.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Updates a product parameter
   * Leaving out a property will ensure no changes are made to that property. Collection properties will delete and/or add as necessary to match the supplied data.
   * @param id The id of the product parameter to update.   * @param productParameter The product parameter data to update.
  */
  public void updateProductParameter (Integer id, ProductParameterModelsWriteProductParameter productParameter, final Response.Listener<EnvelopeProductParameterModelsReadProductParameter> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productParameter;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling updateProductParameter",
        new ApiException(400, "Missing the required parameter 'id' when calling updateProductParameter"));
    }
    // verify the required parameter 'productParameter' is set
    if (productParameter == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productParameter' when calling updateProductParameter",
        new ApiException(400, "Missing the required parameter 'productParameter' when calling updateProductParameter"));
    }

    // create path and map variables
    String path = "/API/ProductParameter/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json","text/json","application/xml","text/xml","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EnvelopeProductParameterModelsReadProductParameter) ApiInvoker.deserialize(localVarResponse,  "", EnvelopeProductParameterModelsReadProductParameter.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update a product parameter group
  * Leaving out a property will ensure no changes are made to that property. Collection properties will delete and/or add as necessary to match the supplied data.
   * @param id The id of the product parameter group to update.
   * @param productParameterGroup The product parameter group data to update.
   * @return EnvelopeProductParameterModelsReadProductParameterGroup
  */
  public EnvelopeProductParameterModelsReadProductParameterGroup updateProductParameterGroup (Integer id, ProductParameterModelsWriteProductParameterGroup productParameterGroup) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productParameterGroup;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling updateProductParameterGroup",
        new ApiException(400, "Missing the required parameter 'id' when calling updateProductParameterGroup"));
    }
    // verify the required parameter 'productParameterGroup' is set
    if (productParameterGroup == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productParameterGroup' when calling updateProductParameterGroup",
        new ApiException(400, "Missing the required parameter 'productParameterGroup' when calling updateProductParameterGroup"));
    }

    // create path and map variables
    String path = "/API/ProductParameter/Group/{id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json",
      "text/json",
      "application/xml",
      "text/xml",
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EnvelopeProductParameterModelsReadProductParameterGroup) ApiInvoker.deserialize(localVarResponse, "", EnvelopeProductParameterModelsReadProductParameterGroup.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update a product parameter group
   * Leaving out a property will ensure no changes are made to that property. Collection properties will delete and/or add as necessary to match the supplied data.
   * @param id The id of the product parameter group to update.   * @param productParameterGroup The product parameter group data to update.
  */
  public void updateProductParameterGroup (Integer id, ProductParameterModelsWriteProductParameterGroup productParameterGroup, final Response.Listener<EnvelopeProductParameterModelsReadProductParameterGroup> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productParameterGroup;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling updateProductParameterGroup",
        new ApiException(400, "Missing the required parameter 'id' when calling updateProductParameterGroup"));
    }
    // verify the required parameter 'productParameterGroup' is set
    if (productParameterGroup == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productParameterGroup' when calling updateProductParameterGroup",
        new ApiException(400, "Missing the required parameter 'productParameterGroup' when calling updateProductParameterGroup"));
    }

    // create path and map variables
    String path = "/API/ProductParameter/Group/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json","text/json","application/xml","text/xml","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKey", "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EnvelopeProductParameterModelsReadProductParameterGroup) ApiInvoker.deserialize(localVarResponse,  "", EnvelopeProductParameterModelsReadProductParameterGroup.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
