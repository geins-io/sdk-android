/**
 * Geins Management API
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.util.*;
import java.util.UUID;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class ContainerRestrictionSetupContainerRestrictionConfiguration {
  
  public enum List&lt;AllowedLayoutsEnum&gt; {
     0,  1,  2,  3,  4,  5,  6,  7,  8, 
  };
  @SerializedName("AllowedLayouts")
  private List<AllowedLayoutsEnum> allowedLayouts = null;
  @SerializedName("BannedWidgets")
  private List<UUID> bannedWidgets = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public List<AllowedLayoutsEnum> getAllowedLayouts() {
    return allowedLayouts;
  }
  public void setAllowedLayouts(List<AllowedLayoutsEnum> allowedLayouts) {
    this.allowedLayouts = allowedLayouts;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public List<UUID> getBannedWidgets() {
    return bannedWidgets;
  }
  public void setBannedWidgets(List<UUID> bannedWidgets) {
    this.bannedWidgets = bannedWidgets;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerRestrictionSetupContainerRestrictionConfiguration containerRestrictionSetupContainerRestrictionConfiguration = (ContainerRestrictionSetupContainerRestrictionConfiguration) o;
    return (this.allowedLayouts == null ? containerRestrictionSetupContainerRestrictionConfiguration.allowedLayouts == null : this.allowedLayouts.equals(containerRestrictionSetupContainerRestrictionConfiguration.allowedLayouts)) &&
        (this.bannedWidgets == null ? containerRestrictionSetupContainerRestrictionConfiguration.bannedWidgets == null : this.bannedWidgets.equals(containerRestrictionSetupContainerRestrictionConfiguration.bannedWidgets));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.allowedLayouts == null ? 0: this.allowedLayouts.hashCode());
    result = 31 * result + (this.bannedWidgets == null ? 0: this.bannedWidgets.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerRestrictionSetupContainerRestrictionConfiguration {\n");
    
    sb.append("  allowedLayouts: ").append(allowedLayouts).append("\n");
    sb.append("  bannedWidgets: ").append(bannedWidgets).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
